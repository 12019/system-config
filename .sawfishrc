(require 'sawfish.wm.util.keymap)
(require 'sawfish.wm.state.maximize)

(load-file "~/.sawfish/bhj-draw-wininfo.jl")
(require 'Run-application)
(require 'bhj-draw-wininfo)

(setq emacs-style-window-class-re "emacs|firefox|konsole|gnome-terminal|rdesktop")
(setq s-h-keymap (make-keymap))
(setq global-remap-alist
      '(("C-a" . "Home")
        ("C-g" . "ESC")
        ("C-e" . "End")
        ("C-b" . "Left")
        ("C-f" . "Right")
        ("M-b" . "C-Left")
        ("M-f" . "C-Right")
        ("C-s" . "C-g")
        ("C-v" . "Next")
        ("M-v" . "Prior")
        ("C-r" . "C-S-g")
        ("C-k" . ("S-End" "Del"))
        ("M-BS" . "C-BS")
        ("C-p" . "Up")
        ("C-n" . "Down")
        ("C-x" . "C-x")))

(setq esc-g-remap-alist
      '(("M-g g" . ("M-v" "g" "p"))))



(bind-keys global-keymap "Super-h" s-h-keymap)

(load-file "~/.sawfish/iswitch-window.jl")
(bind-keys global-keymap "Super-s" 'iswitch-window)

(defun bhj-window-class (window)
  (window-class window))

(bind-keys s-h-keymap "s" (lambda () (system "~/bin/screenshot focused&")))
(bind-keys s-h-keymap "S" (lambda () (system "~/bin/os&")))
(bind-keys s-h-keymap "n" (lambda () (system "~/bin/douban next&")))
(bind-keys global-keymap "XF86AudioNext" (lambda () (system "~/bin/douban next&")))
(bind-keys global-keymap "XF86Launch9" (lambda () (system "~/bin/douban next&")))
(bind-keys s-h-keymap "p" (lambda () (system "~/bin/douban prev&")))
(bind-keys global-keymap "XF86AudioPrev" (lambda () (system "~/bin/douban prev&")))
(bind-keys global-keymap "XF86Launch8" (lambda () (system "~/bin/douban prev&")))
(bind-keys global-keymap "Super-XF86AudioPlay" (lambda () (system "~/bin/douban pause&")))
(bind-keys global-keymap "XF86AudioPlay" (lambda () (system "~/bin/douban info&")))
(bind-keys global-keymap "C-XF86AudioPlay" (lambda () (system "~/bin/douban lyrics&")))
(bind-keys global-keymap "Super-C-i" (lambda () (system "~/bin/screenshot&")))
(bind-keys global-keymap "Super-DEL" (lambda () (system "gnome-screensaver-command -l&")))
(bind-keys global-keymap "Super-XF86KbdBrightnessUp" (lambda () (system "switch-touchpad enable&"))) ; for mac
(bind-keys global-keymap "Super-XF86KbdBrightnessDown" (lambda () (system "switch-touchpad enable&"))) ; for mac
(bind-keys global-keymap "Super-Print" (lambda () (system "super-print.sh&")))
(bind-keys window-keymap "Super-I" (lambda () (display-message (concat "wm_class is: "
                                                                       (translate-string (substring (caddr (get-x-property (input-focus) (quote WM_CLASS))) 0) "|")
                                                                       ";\n\nand Window class is: "
                                                                       (window-class (input-focus))))))

(bind-keys window-keymap "Super-q"
             (lambda ()
               (let ((window (input-focus)))
                 (unless (equal (window-class window) "Xfce4-panel")
                   (delete-window-safely window)))))

(defun bhj-activate-window (window)
  (if (window-iconified-p window)
      (uniconify-window window))
  (activate-window window))


(defun find-window-or-exec (wclass-or-lambda #!optional wcommand)
  (if (eq (catch 'wFound
            (mapc (lambda (window)
                    (when (if (stringp wclass-or-lambda)
                              (string-match wclass-or-lambda (bhj-window-class window) 0 t)
                            (when functionp wclass-or-lambda
                                  (write (stderr-file) "hello world\n")
                                  (wclass-or-lambda window)))

                      (bhj-activate-window window)
                      (throw 'wFound 'wFound)))
                  (stacking-order)))
          'wFound)
      t
    (if wcommand
        (system (concat wcommand "&")))
    nil))

(mapc
 (lambda (args)
   (let ((key (car args))
         (wclass (cadr args))
         (wcommand (caddr args)))
     (bind-keys s-h-keymap key
                (lambda ()
                  (find-window-or-exec (eval wclass) wcommand)))))
 '(
   ("Super-m" "emacs" "emacs.bhj")
   ("Super-n" "firefox" "firefox")
   ("Super-r" "grun" "grun")
   ("Super-t" "konsole" "konsole -e ~/bin/myscr")
   ("Super-C-d" (lambda (w) (string-match "my-dict" (window-name w) 0 t)) "gnome-terminal -t my-dict -e ~/bin/Linux/my-dict")
   ("Meta-Scroll_Lock" "hello world no such thing" "lock-screen")
   ("Super-XF86AudioRaiseVolume" "hello world no such thing" "lock-screen")
   ("Super-x" "xcalc" "xcalc")
   ("XF86Switch_VT_12" "konsole" "konsole -e ~/bin/myscr")
   ("Shift-ESC" "konsole" "konsole --hide-menubar -e ~/bin/myscr")))

(bind-keys global-keymap "C-S-XF86PowerOff" (lambda () (system "lock-screen&")))
(bind-keys global-keymap "C-S-DEL" (lambda () (system "lock-screen&")))


(defun do-global-remap()
  (let ((c-x-map (make-keymap))
        (esc-map (make-keymap))
        (esc-g-map (make-keymap)))
    (mapc (lambda (key-map-1)
            (let ((from (car key-map-1))
                  (to (cdr key-map-1)))
              (when (string-match "^M-" from 0 nil)
                (bind-keys esc-map (substring from 2) (lambda () (synthesize-event to (input-focus)))))
              (bind-keys global-keymap from (lambda ()
                                              (if (stringp to)
                                                  (synthesize-event to (input-focus))
                                                (mapc (lambda (key1)
                                                        (synthesize-event key1 (input-focus)))
                                                      to))))
              (bind-keys c-x-map from (lambda () (synthesize-event from (input-focus))))))
          global-remap-alist)
    (mapc (lambda (key-map-1)
            (let ((from (car key-map-1))
                  (to (cdr key-map-1)))
              (bind-keys esc-g-map (substring from 4) (lambda ()
                                                        (if (stringp to)
                                                            (synthesize-event to (input-focus))
                                                          (mapc (lambda (key1)
                                                                  (synthesize-event key1 (input-focus)))
                                                                to))))
              ))
          esc-g-remap-alist)
    (bind-keys global-keymap "ESC" esc-map)
    (bind-keys esc-map "ESC" (lambda () (synthesize-event "ESC" (input-focus))))
    (bind-keys esc-map "g" esc-g-map)
    (bind-keys global-keymap "C-x" c-x-map)))


(defun undo-global-remap()
  (mapc (lambda (key-map-1)
          (let ((from (car key-map-1))
                (to (cdr key-map-1)))
            (unbind-keys global-keymap from)))
        global-remap-alist)
  (unbind-keys global-keymap "C-x")
  (unbind-keys global-keymap "ESC"))

;; (let ((esc-map (make-keymap)))
;;   (bind-keys global-keymap "ESC" esc-map)
;;   (bind-keys esc-map "b" (lambda () (synthesize-event "C-Left" (input-focus)))))

(setq no-tap-drag-window-class-re "acroread")
(progn
  (add-hook 'focus-in-hook
          (lambda (w focus-mode)
            (if (string-match emacs-style-window-class-re (window-class w) 0 t)
                (undo-global-remap)
              (do-global-remap))
            (if (string-match no-tap-drag-window-class-re (window-class w) 0 t)
                (system "synclient TapAndDragGesture=0&")
              (system "synclient TapAndDragGesture=1&")))))

;; (setq focus-in-hook (cons (nth 2 focus-in-hook)
;;                         (cons (nth 4 focus-in-hook))))

(bind-keys s-h-keymap "m" (lambda () (undo-global-remap)))
;; to clear it: (setq visibility-notify-hook nil)

(bind-keys s-h-keymap "Super-h" (lambda () (synthesize-event "Super-h" (input-focus))))
(bind-keys global-keymap "Super-\\" (lambda () (synthesize-event "C-|" (input-focus))))
(bind-keys s-h-keymap "Super-s" 'iswitch-window)
(bind-keys s-h-keymap "Super-f" (lambda () (maximize-window-fullscreen-toggle (input-focus))))
(unbind-keys global-keymap "Super-f")

(bind-keys window-keymap "Button1-Click" 'raise-and-pass-through-click)


(mapc
 (lambda (arg)
   (let ((wclass nil) (wmark nil))
     (bind-keys global-keymap (concat "C-M-" (format nil "%d" arg))
                (lambda ()
                  (setq wmark (input-focus))
                  (setq wclass (bhj-window-class (input-focus)))))
     (bind-keys global-keymap (concat "Super-" (format nil "%d" arg))
                (lambda ()
                  (if (and  (windowp wmark) (window-mapped-p wmark))
                      (bhj-activate-window wmark)
                    (if wclass
                        (find-window-or-exec wclass)))))))
 '(0 1 2 3 4 5 6 7 8 9))

(setq super-key-window-remap
      '(("v" . ((t . "S-Insert")))
        ("c" . ((Emacs . "M-w")
                (Konsole . "C-S-c")
                (Gnome-terminal . "C-S-c")))
        ("w" . ((Firefox . ("C-x" "k"))))
        ("l" . ((Firefox . ("C-x" "C-l"))))
        ("r" . ((Firefox . ("C-x" "C-r"))))
        ("s" . ((Firefox . ("C-x" "C-s"))))
        ("d" . ((Firefox . ("C-x" "C-d"))))))

(setq gnome-windows-re "gnome-terminal|nautilus")

(defun rewrite-event-for-xtool (event)
  (let* ((keys-break-down (string-split "-" event))
         (modifiers (reverse (cdr (reverse keys-break-down))))
         (main-key (last keys-break-down))
         (result ""))
    (while modifiers
      (case (intern (car modifiers))
        ((C Control)
         (setq result (concat result "ctrl+")))
        ((S Shift)
         (setq result (concat result "shift+")))
        ((M Meta)
         (setq result (concat result "alt+")))
        ((Super)
         (setq result (concat result "super+"))))
      (setq modifiers (cdr modifiers)))
    (setq result (concat result main-key))))

(defun synthesize-or-xdotool (event window gnome?)
  (if gnome?
      ;; The sleep is necessary for unknown reason, but it won't work
      ;; without it.
      (system (concat "sleep .5 && xdotool key --clearmodifiers " (rewrite-event-for-xtool event)))
    (synthesize-event event window)))

(mapc
 (lambda (key)
   (bind-keys global-keymap
              (concat "Super-" key)
              (lambda ()
                (let* ((fw (input-focus))
                       (class (window-class fw))
                       (gnome? (string-match gnome-windows-re class 0 t))
                       (map-to (or (cdr (or (assoc (intern class) (assoc key super-key-window-remap))
                                            (assoc t (assoc key super-key-window-remap))))
                                   (concat "C-" key))))
                  (if (listp map-to)
                      (mapc (lambda (map-1)
                              (synthesize-event map-1 fw))
                            map-to)

                    (synthesize-event map-to fw))))))
 '("t" "w" "n" "c" "v" "l" "r" "s" "d"))

(bind-keys global-keymap "Super-Insert" (lambda () (system "send-key&")))
(bind-keys global-keymap "Super-S-RET" (lambda () (system "send-key&")))
(bind-keys global-keymap "Super-RET" (lambda () (synthesize-event "S-Insert" (input-focus))))
(bind-keys global-keymap "Super-BS" (lambda () (synthesize-event "Prior" (input-focus))))
(bind-keys global-keymap "Super-SPC" (lambda () (synthesize-event "Next" (input-focus))))
(bind-keys global-keymap "Super-Control-n" (lambda () (system "daily-notes&")))
(bind-keys global-keymap "Super-Control-o" (lambda () (system "emacsclient -n ~/doc/notes.org&")))


(bind-keys s-h-keymap "Super-d"
           (lambda ()
             (if (not (showing-desktop-p))
                 (show-desktop)
               (hide-desktop))))

(bind-keys s-h-keymap "r" 'run-application)

(system "run-dir-once ~/.sawfish/start&")

(require 'sawfish.wm.commands.x-cycle)

(setq im-class "QQ.exe|kopete|Pidgin" ;; im = instant messanger
      br-class "Navigator|epiphany-browser|chromium|Download" ;; br = browser
      dc-class "libreoffice|DocumentWindow|VCLSalFrame|openoffice|AcroRd32.exe|acroread|evince|Gnumeric|mupdf" ;; dc = doc
      mg-class "meld|gimp|gitk|tkdiff|rdesktop" ;; mg = meld/gimp
      fm-class "nautilus|file-roller" ;; fm = file manager
      cycle-groups (list im-class
                     br-class
                     dc-class))

(define-cycle-command-pair
  'cycle-class-bhj 'cycle-class-bhj-backwards
  (lambda (w)
    (let ((class (bhj-window-class w)))
      (delete-if-not window-in-cycle-p
                     (filter-windows
                      (lambda (x) (equal (bhj-window-class x) class))
                      (window-order)))))
  #:spec "%W")

(define-cycle-command-pair
  'cycle-im-window 'cycle-im-windows-backwards
  (lambda () (filter-windows
              (lambda (x) (string-match im-class (bhj-window-class x)))
              (stacking-order))))

(define-cycle-command-pair
  'cycle-br-window 'cycle-br-window-backwards
  (lambda () (filter-windows
              (lambda (x) (string-match br-class (bhj-window-class x)))
              (stacking-order))))

(define-cycle-command-pair
  'cycle-dc-window 'cycle-dc-window-backwards
  (lambda () (filter-windows
              (lambda (x) (string-match dc-class (bhj-window-class x)))
              (stacking-order))))

(define-cycle-command-pair
  'cycle-mg-window 'cycle-mg-window-backwards
  (lambda () (filter-windows
              (lambda (x) (string-match mg-class (bhj-window-class x)))
              (stacking-order))))

(define-cycle-command-pair
  'cycle-fm-window 'cycle-fm-window-backwards
  (lambda () (filter-windows
              (lambda (x) (and (string-match fm-class (bhj-window-class x))
                               (not (string-match "x-nautilus-desktop" (window-name x)))))
              (stacking-order))))
