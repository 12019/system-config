#!/usr/bin/ruby

require 'xmlsimple'

if not system("git-is-clean")
  exit 1
end

xml = `select-output-line find ~/gcode/android-templates -name 'template.xml'`
config = XmlSimple.xml_in(xml)

require 'shellwords'
def ask_for_input (prompt)
  `ask-for-input-with-sawfish -p #{Shellwords.escape(prompt)}`
end

$parameter = {
  'isNewProject' => 'false!',
  'isGradle' => 'false!',

  "compileSdkVersion" => '19',
  "buildApi" => '19!',
  "buildToolsVersion" => "19.0.0",

  "minSdkVersion" => '7!',
  "minApiLevel" => '7',
  "minApi" => '7',
  "targetSdkVersion" => '19!',
  "isLauncher" => 'false!',
}

config.each do |element, val|
  print "#{element} => #{val}\n"
  if element == 'parameter'
    val.each do |paramAttrs|
      print "#{paramAttrs['name']}'s id is #{paramAttrs['id']}\n"

      # <parameter
      #   id="navType"
      #   name="Navigation Type"
      #   type="enum"
      #   default="none"
      #   help="The type of navigation to use for the activity" >
      #     <option id="none" default="true">None</option>
      #     <!--<option id="tabs" minApi="11">Fixed Tabs</option>-->
      #     <option id="tabs_pager" minApi="11">Fixed Tabs + Swipe</option>
      #     <option id="pager_strip" minApi="11">Scrollable Tabs + Swipe</option>
      #     <option id="dropdown" minApi="11">Dropdown</option>
      # </parameter>

      if paramAttrs['type'] == 'enum'
        options = ""
        paramAttrs['option'].each do |option|
          options += " " + Shellwords.escape("#{option['id']} : #{option['content']}")
        end
        prompt = Shellwords.escape "Which option for #{paramAttrs['name']}"
        input = `select-args -p #{prompt} #{options}`
        input.gsub!(/ : .*/, "")
      elsif paramAttrs['id'] == "packageName"
        packages = `rgrep '^package.*;' src | pn 2 | sort -u | grep . | perl -npe 's/;//'`
        packages.gsub!(/\n/, " ")
        packages += " #{paramAttrs['default']}"
        prompt = Shellwords.escape "What is your #{paramAttrs['name']}? "
        input = `select-args -p #{prompt} #{packages} unknown`
        input.gsub!(/ : .*/, "")
      else
        prompt = Shellwords.escape "Parameter #{paramAttrs['name']}? "
        options = Shellwords.escape "#{paramAttrs['default']} : default"
        options += " " + Shellwords.escape("Enter your own input with ! at the end")
        input = `select-args -p #{prompt} #{options}`
        input.gsub!(/ : default$/, "")
      end
      if input == "" and paramAttrs['default']
        $parameter[paramAttrs['id']] = paramAttrs['default']
      else
        $parameter[paramAttrs['id']] = input
      end

      if paramAttrs['type'] == 'boolean'
        $parameter[paramAttrs['id']] += '!' unless $parameter[paramAttrs['id']] =~ /!$/
      end

      puts "input for #{paramAttrs['name']} is #{$parameter[paramAttrs['id']]}"

    end
  end
end

def camelCaseToUnderscore(str)
  str.gsub(/[A-Z]+/) do
    "_%s" % $~[0].downcase()
  end
end

def underscoreToCamelCase(str)
  t.gsub(/_([a-z])/) do
    $~[1].upcase()
  end
end

def stripActivity(str)
  str.gsub(/(Activity|Fragment|Service|Provider)$/, '')
end

$temp_methods = {
  slashedPackageName: proc {|t|
    if not t
      packages = `rgrep '^package.*;' src | pn 2 | sort -u | grep . | perl -npe 's/;//'`
      packages.gsub!(/\n/, " ")
      packages += " com.baohaojun.unknown"
      prompt = Shellwords.escape "What is your package name? "
      input = `select-args -p #{prompt} #{packages}`
      input.gsub!(/ : .*/, "")
      t = input
      t.gsub(/\./, '/')
      $parameter['packageName'] ||= t
    end
  },

  camelCaseToUnderscore: proc {|t|
    camelCaseToUnderscore(t)
  },

  underscoreToCamelCase: proc {|t|
    underscoreToCamelCase(t)
  },

  activityToLayout: proc {|t|
    "layout_" + camelCaseToUnderscore(stripActivity(t))
  },

  layoutToActivity: proc {|t|
    underscoreToCamelCase(t.sub(/^layout_/, '')) + 'Activity'
  },

  classToResource: proc {|t|
    camelCaseToUnderscore(stripActivity(t))
  },

  escapeXmlAttribute: proc {|t| t },
  escapeXmlText: proc {|t| t },
  escapeXmlString: proc {|t| t },
  extractLetters: proc {|t| t },
}

def templateCall(template)
  print "template is #{template}\n"
  if /(\w+)\((.*)\)/ =~ template
    func = $~[1]
    arg = templateCall $~[2]
    if defined? $temp_methods[func.to_sym]
      $temp_methods[func.to_sym].call(arg)
    else
      die "no such method: #{func}"
    end
  elsif defined? $parameter[template]
    $parameter[template]
  else
    die "no such value: #{template}\n"
  end
end

if config['globals']
  dir = File.dirname(xml)
  config['globals'].each do |global_element|
    global_file = File.join(dir, global_element['file'])

    print "global_file is #{global_file}\n"
    config2 = XmlSimple.xml_in(global_file)

    print "config2 is #{config2}\n"
    config2['global'].each do |paramAttrs|
      $parameter[paramAttrs['id']] = paramAttrs['value']

      if paramAttrs['value'].index('${')
        $parameter[paramAttrs['id']].gsub!(/\$\{.*?\}/) do |template|
          templateCall template
        end
      end
    end
  end
end

if config['execute']
  $template_xml_dir = dir = File.dirname(xml)
  config['execute'].each do |exec_elem|
    exec_file = File.join(dir, exec_elem['file'])
    $param_str = ""
    $parameter.each do |key, val|
      $param_str += " %s %s" % [Shellwords.escape(key), Shellwords.escape(val)]
    end
    $recipe_str = "freemarker #{dir} #{exec_elem['file']} #{$param_str}"
  end
end

if $recipe_str
  $recipe_str = `#{$recipe_str}`
  puts "$recipe_str is #{$recipe_str}"
  $recipe_config = XmlSimple.xml_in($recipe_str)

  ['merge', 'instantiate', 'copy'].each do |action|
    $recipe_config[action] = $recipe_config[action] || [];
    puts "$recipe_config[action] is '#{$recipe_config[action]}'"
  end

  $recipe_config['copy'].each do |inst_spec|
    from = inst_spec['from']
    to = inst_spec['to']
    src = File.join($template_xml_dir, "root", from)
    if not File::exist?(to)
      require 'fileutils'
      FileUtils.mkdir_p(File.dirname to)
    end

    if File::directory?(to)
      to = File.dirname to
    end
    system("cp -avi #{src} #{to}")

  end

  $recipe_config['instantiate'].each do |inst_spec|
    from = inst_spec['from']
    to = inst_spec['to']
    dir = File.join($template_xml_dir, "root")
    from_str = "freemarker #{dir} #{from} #{$param_str}"
    from_str = `#{from_str}`
    if not File::exist?(to)
      require 'fileutils'
      FileUtils.mkdir_p(File.dirname to)
      file = File.new(to, 'w')
      file.write(from_str)
      file.close
    end
  end

  puts "$recipe_config['merge'] is #{$recipe_config['merge']}"
  $recipe_config['merge'].each do |merge_spec|
    from = merge_spec['from']
    to = merge_spec['to']
    if not to
      to = File.basename from
      to.gsub!(/\.ftl$/, '')
    end

    puts "from is #{from}, to is #{to}"
    dir = File.join($template_xml_dir, "root")
    from_str = "freemarker #{dir} #{from} #{$param_str}"
    print "#{from_str}\n"
    from_str = `#{from_str}`;
    if not File::exist?(to)
      require 'fileutils'
      FileUtils.mkdir_p(File.dirname to)
      file = File.new(to, 'w')
      file.write(from_str)
      file.close
    else
      from_config = XmlSimple.xml_in(from_str, { 'keeproot' => true })
      to_config = XmlSimple.xml_in(to, { 'keeproot' => true })

      def mergeHash!(h1, h2)
        if h1.is_a? Hash
          h1.each do |k, v|
            if h2[k]
              h1[k] = mergeHash!(v, h2[k])
            end
          end
        elsif h1.is_a? Array
          h1 += h2
        else
          h1 = h2 or h1
        end
      end

      to_config.each do |k, v|
        mergeHash!(v[0], from_config[k][0])
      end

      from_config.each do |k, v|
        v[0].each do |ck, cv|
          if not to_config[k][0][ck]
            to_config[k][0][ck] = cv
          end
        end
      end

      puts "to_config is #{to_config}"
      file = File.new(to, 'w')
      out_str = XmlSimple.xml_out(to_config, { 'keeproot' => true })
      file.write(out_str)
      file.close
    end
  end
end
